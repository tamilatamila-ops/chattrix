<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %>
<body class="bg-gray-50">
<!-- <%- include('partials/nav') %> -->

<!-- Enter Password Modal -->
<div id="enterPasswordModal" class="modal hiddenv fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded shadow-md">
      <h2 class="text-lg font-semibold mb-4 text text-center">Enter Creditials</h2>
      <h4 class="text-lg mb-2">User Name</h4>
      <input class="border p-2 w-full mb-4" type="text" id="usernameInput" value="<%= user ? user.name : '' %>" />
      <h4 class="text-lg mb-2">Enter Password</h4>
      <input type="password" id="meetingPassword" class="border p-2 w-full mb-4" placeholder="Password" required />
      <button id="submitPassword" class="bg-blue-500 text-white p-2 rounded">Submit</button>
      <button id="closeEnterModal" class="bg-gray-300 p-2 rounded">Close</button>
    </div>
</div>
  
  <!-- Set Password Modal -->
  <div id="setPasswordModal" class="modal hiddenv fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded shadow-md">
      <h2 class="text-lg font-semibold mb-4 text text-center">Set Creditials</h2>
      <h4 class="text-lg mb-2">User Name</h4>
      <input class="border p-2 w-full mb-4" type="text" id="usernameInput" value="<%= user ? user.name : '' %>" />
      <h4 class="text-lg mb-2">Set Password</h4>
      <input type="password" id="newMeetingPassword" class="border p-2 w-full mb-4" placeholder="New Password" required />
      <button id="setPassword" class="bg-green-500 text-white p-2 rounded">Set Password</button>
      <button id="closeSetModal" class="bg-gray-300 p-2 rounded">Close</button>
    </div>
  </div>


<main class="container mx-auto p-4 flex gap-4 h-screen">
    <!-- Left Side - Video Area -->
    <div class="flex-grow flex flex-col">
        <!-- Title -->
        <div class="mb-4 flex items-center justify-between">
            <div>
                <h1 class="text-xl font-semibold">Video Chat Room</h1>
                <p class="text-sm text-gray-500" id="meeting-time">Active Meeting</p>
            </div>
            <!-- Meeting Controls -->
            <div class="flex items-center gap-2">
                <select id="language-select" class="language-selector bg-gray-200 rounded-full px-4 py-2">
                    <option value="en-US">English (US)</option>
                    <option value="ta-IN">Tamil (India)</option>
                    <option value="hi-IN">Hindi (India)</option>
                    <option value="ja-JP">Japanese</option>
                    <option value="ko-KR">Korean</option>
                    <option value="es-ES">Spanish</option>
                    <option value="fr-FR">French</option>
                    <option value="de-DE">German</option>
                    <option value="it-IT">Italian</option>
                </select>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="flex-grow flex flex-col overallvideocontain">
            <!-- Video Grid -->
            <div class="flex-grow videoContainer" >
                <div class="videoda" id="video-grid">
                    <!-- Videos will be added dynamically -->
                </div>

                <div id="translated-captions" class="mt-2 min-h-[2rem] p-2 bg-white bg-opacity-60 text-black font-bold rounded text-center captionhere">Hello</div>
            </div>
            <!-- video-grid grid grid-cols-2 gap-4 -->


            

            <!-- Video Controls -->
            <div class="mt-0 flex items-center justify-center gap-4 py-4">
                <button id="muteButton" class="control-button p-4 rounded-full bg-gray-200 hover:bg-gray-300">
                    <i data-lucide="mic" class="h-5 w-5"></i>
                </button>
                <button id="videoButton" class="control-button p-4 rounded-full bg-gray-200 hover:bg-gray-300">
                    <i data-lucide="video" class="h-5 w-5"></i>
                </button>
                <button id="leaveButton" class="control-button p-4 rounded-full bg-red-500 hover:bg-red-600 text-white">
                    <i data-lucide="phone-off" class="h-5 w-5"></i>
                </button>

                <div class=" mt-0 flex justify-between items-center">
                    <select id="translation-language" class="bg-gray-100 rounded px-2 py-1">
                        <option value="en">English</option>
                        <option value="ta">Tamil</option>
                        <option value="es">Spanish</option>
                        <option value="fr">French</option>
                        <option value="de">German</option>
                        <option value="hi">Hindi</option>
                        <option value="ja">Japanese</option>
                        <option value="ko">Korean</option>
                    </select>
                    <button id="speak-button" class="ml-2 p-2 rounded-full bg-green-400 hover:bg-green-500 text-white">
                        <i data-lucide="volume-2" class="h-5 w-5"></i>
                    </button>
                </div>
            </div>

            <!-- Captions Section -->
            <div class="mt-4 space-y-4" hidden>
                <!-- Your Speech Section -->
                <div class="bg-white p-4 rounded-lg shadow" >
                    <h3 class="font-medium mb-2">Your Speech</h3>
                    <div id="output" class="min-h-[2rem] p-2 bg-gray-50 rounded">Live Captions</div>
                    <div class="mt-2 flex justify-between items-center">
                        <button id="start-button" class="p-2 rounded-full bg-green-500 hover:bg-green-600 text-white">
                            <i data-lucide="microphone" class="h-5 w-5"></i>
                        </button>
                        <button id="stop-button" class="p-2 rounded-full bg-red-500 hover:bg-red-600 text-white">
                            <i data-lucide="microphone-off" class="h-5 w-5"></i>
                        </button>
                        <select id="your-translation-language" class="bg-gray-100 rounded px-2 py-1">
                            <option value="en">English</option>
                            <option value="ta">Tamil</option>
                            <option value="es">Spanish</option>
                            <option value="fr">French</option>
                            <option value="de">German</option>
                            <option value="hi">Hindi</option>
                            <option value="ja">Japanese</option>
                            <option value="ko">Korean</option>
                            <option value="zh">Chinese</option>
                        </select>
                    </div>
                    <div id="your-translated-captions" class=" ml-4 mt-2 min-h-[2rem] p-2 bg-gray-50 rounded"></div>
                </div>

                <!-- Remote Speech Section -->
                <div class="bg-white p-4 rounded-lg shadow" hidden>
                    <h3 class="font-medium mb-2">Remote Speech</h3>
                    <div id="remote-captions" class="min-h-[2rem] p-2 bg-gray-50 rounded">Remote Captions</div>
                    <div class="mt-2 flex justify-between items-center">
                        <select id="translation-language" class="bg-gray-100 rounded px-2 py-1">
                            <option value="en">English</option>
                            <option value="ta">Tamil</option>
                            <option value="es">Spanish</option>
                            <option value="fr">French</option>
                            <option value="de">German</option>
                            <option value="hi">Hindi</option>
                            <option value="ja">Japanese</option>
                            <option value="ko">Korean</option>
                            <option value="zh">Chinese</option>
                        </select>
                    </div>
                    <div id="translated-captions" class="mt-2 min-h-[2rem] p-2 bg-gray-50 rounded"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Right Side - Chat Area -->
    <div class="w-96 flex-shrink-0 flex flex-col bg-white rounded-lg shadow">
    <div class="p-4 border-b">
        <h2 class="font-medium">Chat</h2>
    </div>
    <div class="flex-grow overflow-y-auto p-4">
        <div class="chat-log space-y-2">
            <!-- Chat messages will be added dynamically -->
        </div>
    </div>
    <div class="p-4 border-t">
        <div class="flex gap-2">
            <input type="text" id="chat-input" class="flex-grow p-2 rounded-lg border" placeholder="Type a message...">
            <button id="send-button" class="p-2 rounded-full bg-gray-200 hover:bg-gray-300">
                <i data-lucide="paper-airplane" class="h-5 w-5"></i>
            </button>
        </div>
    </div>
</div>
</main>



<!-- Scripts -->
<script>
    const ROOM_ID = "<%= roomId %>";
</script>
<script defer src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
<script src="/socket.io/socket.io.js" defer></script>
<script src="script.js" defer></script>
<script src="speechRecognition.js" defer></script>
<script src="textToSpeech.js" defer></script>

<script src="chat.js" defer></script>

<script>
    // Tab switching logic
    const participantsTab = document.getElementById('participantsTab');
    const chatTab = document.getElementById('chatTab');
    const participantsSection = document.querySelector('.participants-section');
    const chatSection = document.querySelector('.chat-section');

    participantsTab.addEventListener('click', () => {
        participantsSection.classList.remove('hidden');
        chatSection.classList.add('hidden');
        participantsTab.classList.add('border-b-2', 'border-blue-500');
        participantsTab.classList.remove('text-gray-500');
        chatTab.classList.remove('border-b-2', 'border-blue-500');
        chatTab.classList.add('text-gray-500');
    });

    chatTab.addEventListener('click', () => {
        participantsSection.classList.add('hidden');
        chatSection.classList.remove('hidden');
        chatTab.classList.add('border-b-2', 'border-blue-500');
        chatTab.classList.remove('text-gray-500');
        participantsTab.classList.remove('border-b-2', 'border-blue-500');
        participantsTab.classList.add('text-gray-500');
    });
</script>

<script>
    const isPasswordSet = "<%= JSON.stringify(isPasswordSet) %>" === 'true'; // Ensure it's a boolean
    const roomId = "<%= roomId %>";

    
    const enterPasswordModal = document.getElementById("enterPasswordModal");
    const setPasswordModal = document.getElementById("setPasswordModal");
    const submitPasswordButton = document.getElementById("submitPassword");
    const closeEnterModalButton = document.getElementById("closeEnterModal");
    const setPasswordButton = document.getElementById("setPassword");
    const closeSetModalButton = document.getElementById("closeSetModal");

    if (isPasswordSet) {
        // Show enter password modal if password is set
        enterPasswordModal.classList.remove("hiddenv");
    } else {
        // Show set password modal if no meeting exists
        setPasswordModal.classList.remove("hiddenv");
    }



    // Handle password submission for entering password
    submitPasswordButton.addEventListener("click", async () => {

        const password = document.getElementById("meetingPassword").value;

        // Verify password with server
        const response = await fetch(`/verify-password`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ roomId, password }),
        });

        if (response.ok) {
            const message = await response.text(); // Get the success message
            alert(message); // Alert the user that the password is correct
            enterPasswordModal.classList.add("hiddenv"); // Hide modal
            // Proceed to the meeting or handle further logic here
        } else {
            const message = await response.text(); // Get the error message
            alert(message); // Alert the user that the password is incorrect
        }
    });

    // Handle setting the password
    setPasswordButton.addEventListener("click", async () => {

        const newPassword = document.getElementById("newMeetingPassword").value;

        // Save new meeting with password
        const response = await fetch(`/setpassword`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ roomId, password: newPassword }),
        });

        console.log(response)

        if (response.ok) {
            const message = await response.text(); // Get the success message
            alert(message); // Alert the user that the password has been set successfully
            setPasswordModal.classList.add("hiddenv"); // Hide modal
            // Optionally redirect or proceed to the meeting
        } else {
            const message = await response.text(); // Get the error message
            alert(message); // Alert the user that setting the password failed
        }
    });

    // Close modals
    closeEnterModalButton.addEventListener("click", () => {
        window.location.href = "/features";
        enterPasswordModal.classList.add("hiddenv");
    });

    closeSetModalButton.addEventListener("click", () => {
        window.location.href = "/features";
        setPasswordModal.classList.add("hiddenv");
    });

</script>

</body>
</html>